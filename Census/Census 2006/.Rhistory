c("Botswana",
"Burundi",
"Cameroon",
"Central African Republic",
"Congo, Republic of the",
"CÃ™te d'Ivoire",
"Congo, Democratic Republic of the",
"Ethiopia", "Gabon", "Kenya", "Malawi", "Mozambique", "Namibia",
"Nigeria", "Lesotho", "Rwanda", "South Africa, Republic of",
"Swaziland", "Uganda", "Tanzania", "Zambia", "Zimbabwe"),
recode(WHO_R, "AFRO" = "AFR-High"),
recode(WHO_R, "AFRO" = "AFR-Low"))
)
unique(census_afr_new$WHO_R)
saveRDS(census_afr_new,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2001/census_afr_2001.rds")
# Prior script census_afr
library(tidyverse)
library(janitor)
# Taking countries that are not classified to a certain WHO region and providing them with that classifcation
census_nc <- readRDS("census_afr_2001.rds")
head(census_nc)
country_list <- unique(census_nc%>%
filter(WHO_R == "Not Classified" & !COO%in%c("Anguilla",
"Antigua and Barbuda",
"Aruba",
"Bermuda",
"Cayman Islands",
"Virgin Islands, British",
"Puerto Rico",
"Guadeloupe",
"Martinique",
"Montserrat",
"Turks and Caicos Islands","American Samoa",
"French Polynesia",
"Guam",
"New Caledonia",
"Tokelau",
"Wallis and Futuna"))%>%
select(COO))
View(country_list)
dput(as.character(country_list))
census_nc%>%filter(COO == "Brazil")
census_classified <- census_nc%>%
mutate(WHO_R =
ifelse(
COO%in%
c("Anguilla",
"Antigua and Barbuda",
"Aruba",
"Bermuda",
"Cayman Islands",
"Virgin Islands, British",
"Puerto Rico",
"Guadeloupe",
"Martinique",
"Montserrat",
"Turks and Caicos Islands",
"Greenland",
"Falkland Islands (Malvinas)",
"French Guiana"),
recode(WHO_R, "Not Classified" = "AMRO"),
ifelse(COO%in%
c("American Samoa",
"French Polynesia",
"Guam",
"New Caledonia",
"Tokelau",
"Wallis and Futuna"),
recode(WHO_R, "Not Classified" = "WPRO"),
ifelse(
COO == "West Bank and Gaza Strip (Palestine)"
, recode(WHO_R, "Not Classified" = "SEARO"),
ifelse(
COO%in%
c("Liechtenstein",
"Gibraltar"),
recode(WHO_R, "Not Classified" = "EURO"),
recode(WHO_R, "Not Classified" = "Not Classified")
)
))
)
)
census_classified%>%filter(COO%in%c("Liechtenstein", "Aruba", "New Caledonia"))
# Remove Caribbean and Bermuda
census_classified <- census_classified%>%
filter(WHO_R != "Not Classified")
#View(census_classified%>%
#       filter(COO == "Caribbean and Bermuda"))
census_classified <- census_classified%>%
mutate(census_year = 2001)
View(census_classified%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
View(census_classified)
unique(census_classified$COO)
census_classified%>%filter(ISO3 == "AFG")
census_classified%>%filter(ISO3 == "AFG")%>%summarize(sum(NUMP))
write.csv(census_classified, file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2001/census_classified_2001.csv")
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
View(census)
setwd("~/OneDrive - McGill University/LTBI-Aust-CEA-master/Data")
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
View(census)
setwd("~/OneDrive - McGill University/LTBI-Aust-CEA-master")
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
View(census)
#' Load the census data
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
setwd("~/OneDrive - McGill University/LTBI-Aust-CEA-master/Data")
#' Data inputs file path
path.in <- "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/"
#' Output file path
path.out <- "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/"
#' Load the census data
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
View(census)
census <- census%>%select(-X, -AGE_BANDS, -YARP_GROUPS)
View(census)
colnames(census) <- c("ISO3", "BPLP", "YARP", "AGEP", "YOBP", "NUMP", "WHO_R","CNSY")
View(census)
rm(list = ls(all.names = TRUE)) # Clears all objects includes hidden objects.
gc() # Frees up memory and report the memory usage.
library(data.table)
library(tidyverse)
library(reshape2)
library(countrycode)
census.iso3 <- "CAN"
census.year <- 2001
#' This script will calculate the median hazard for each population
#' group in the census and, additionally, will provide lower and
#' upper percentile estimates, as defined by the following
#' objects.
low.percentile <- 0.25
high.percentile <- 0.75
#' Data inputs file path
path.in <- "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/"
#' Output file path
path.out <- "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/"
#' Source all functions, which are located within the "Functions" file.
source(paste0(path.in, "Functions3 copy.R"))
filename <- paste0(path.in, "200repLARI.Rdata")
load(filename)
tbhaz.200rep <- as.data.table(rundata)
rm(rundata)
#' Load the census data
census <- read.csv(paste0(path.in, "census_classified_2001.csv"), header = T)
census <- census%>%select(-X, -AGE_BANDS, -YARP_GROUPS)
colnames(census) <- c("ISO3", "BPLP", "YARP", "AGEP", "YOBP", "NUMP", "WHO_R","CNSY")
View(census)
#census <- census%>%filter(!ISO3 %in% c("FLK", "GIB", "GLP" ,"GUF" ,"LIE", "MTQ"))
# census <- read.csv(paste0(path.in, "Australia 2006.csv"), skip = 9, header = T)
# census <- read.csv(paste0(path.in, "Australia 2011.csv"), skip = 9, header = T)
#View(census)
#' Load TB data
tb <- read.csv(paste0(path.in, "NNDSS skeleton.csv"), header = T)
#' Creating cumulative FOIs and adjusting for census year.
#' Also expanding the table's year range ( 1889 to 2016).
tbhaz.200rep <- tbhazprep.function(tbhaz.200rep)
View(tbhaz.200rep)
#' Clean the TB data so that it has the following columns
#' AGEP, YARP, cob, NUMP, year, YOBP and ISO3
tb <- CleanseTBdata(tb)
tb <- subset(tb, year == census.year)
tb <- as.data.table(tb)
tb[, CNSY := as.numeric(year)]
#' Checking if there are any countries that don't have an
#' ISO3 match from Houben and Dodd.
setdiff(census$ISO3, tbhaz.200rep$iso3)
View(census)
setdiff(tb$ISO3, census$ISO3)
setdiff(tb$ISO3, tbhaz.200rep$iso3)
setdiff(tbhaz.200rep$iso3, census$ISO3) #' All countries in the census data are captured in Houben & Dodd data.
#' Create a master look-up table of all probabilities of infection
#' for each population group, by using the census and tb tables
#' to get a list of unique ISO codes.
master.Prob <- CreateProbTables()
prob.Inf200 <- master.Prob[ !(ISO3 %in% c(census.iso3))]
#' Also create a separate look-up table for the locally born.
prob.Inf.local <- master.Prob[ISO3 == census.iso3]
#' Tidy
rm(master.Prob)
prob.Inf.local <- TBhazard.calc.function.local.born(prob.Inf.local, tbhaz.200rep)
#' Saving and removing file (memory management)
saveRDS(prob.Inf.local, file = paste0(path.out, "prob.Inf.local.rds"))
rm(prob.Inf.local)
prob.Inf200[YOBP < 1930 , YOBPgroup := 1]
prob.Inf200[YOBP > 1929 & YOBP < 1960 , YOBPgroup := 2]
prob.Inf200[YOBP > 1959 & YOBP < 1980 , YOBPgroup := 3]
prob.Inf200[YOBP > 1979 & YOBP < 2000 , YOBPgroup := 4]
prob.Inf200[YOBP > 1999 & YOBP < 2010 , YOBPgroup := 5]
prob.Inf200[YOBP > 2009 , YOBPgroup := 6]
yob.split <- split(prob.Inf200, prob.Inf200$YOBPgroup)
yob.split <- lapply(yob.split, TBhazard.calc.function.overseas.born, tbhaz.200rep)
prob.Inf200 <- do.call("rbind", yob.split)
#yob.split[[4]]
#' Tidy
#'
rm(yob.split)
#' Saving and removing file (memory management)
saveRDS(prob.Inf200, file = paste0(path.out, "prob.Inf200.rds"))
View(prob.Inf200)
#' Tidy
rm(prob.Inf200)
#' Order the census data.table.
census <- setorder(census, ISO3, YOBP, YARP)
#' Load the look-up tables back in.
prob.Inf200 <- readRDS(paste0(path.out, "prob.Inf200.rds"))
#prob.Inf5000 <- readRDS(paste0(path.out, "prob.Inf5000.rds"))
prob.Inf.local <- readRDS(paste0(path.out, "prob.Inf.local.rds"))
#' Bind the look-up tables altogether to make the master look-up.
prob.Inf <- rbind(prob.Inf.local, prob.Inf200, fill = T)
#' Tidy ==========EDITED OUT prob.Inf5000
rm(prob.Inf.local, prob.Inf200)
#' Calculating the probability of infection (PROB)
#' from the hazards.
prob.Inf[, PROB.med := 1 - exp(-(H.med))]
prob.Inf[, PROB.low := 1 - exp(-(H.low))]
prob.Inf[, PROB.high := 1 - exp(-(H.high))]
census <- as.data.table(census)
census[prob.Inf, LTBP := NUMP * PROB.med, on = .(ISO3, YOBP, YARP)]
census[prob.Inf, LTBP.low := NUMP * PROB.low, on = .(ISO3, YOBP, YARP)]
census[prob.Inf, LTBP.high := NUMP * PROB.high, on = .(ISO3, YOBP, YARP)]
census_na <- na.omit(census)
View(prob.Inf)
write.csv(census,"/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/Outputs/2011estimates.csv", row.names = FALSE)
saveRDS(census, file = paste0(path.out, "2011estimates.rds"))
#' Save all the objects that haven't yet been saved.
saveRDS(prob.Inf, file = paste0(path.out, "2011.prob.Inf.rds"))
saveRDS(census, file = paste0(path.out, "2011_census.rds"))
write.csv(census,"/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Data/Outputs/estimates_2001.csv", row.names = FALSE)
saveRDS(census, file = paste0(path.out, "estimates_2001.rds"))
#' DATA OUTPUTS =======================================================================================================#
#' Save all the objects that haven't yet been saved.
saveRDS(prob.Inf, file = paste0(path.out, "2001.prob.Inf.rds"))
saveRDS(census, file = paste0(path.out, "2001_census.rds"))
tbi_2001 <- readRDS("estimates_2001.rds")
View(tbi_2001)
tbi_2001%>%summarise(tbi_tot = sum(LTBP)/sum(NUMP))
rm(list = ls(all.names = TRUE))
library(tidyverse)
library(reshape2)
library(readxl)
library(writexl)
census_2006 <- read_xlsx("Census 2006.xlsx", skip = 1)
View(census_2006)
setwd("~/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006")
rm(list = ls(all.names = TRUE))
library(tidyverse)
library(reshape2)
library(readxl)
library(writexl)
census_2006 <- read_xlsx("Census 2006.xlsx", skip = 1)
View(census_2006)
census_yarp <- census_2006%>%filter(!`Immigrant Stat`%in%c("Total - Immigrant Status and Period of Immigration", "Non-immigrants", "Immigrants", "Non-permanent residents"))%>%filter(`Place of Birth` != "Total - Place of birth of respondent")%>%select(-"Total - Age groups")
colnames(census_yarp) <- c("COO", "YARP", "0-14", "15-24", "25-54", "55-64", "65+")
# Clear out some unneeded rows and columns
census_yarp <- census_2006%>%filter(!`Immigrant Stat`%in%c("Total - Immigrant Status and Period of Immigration", "Non-immigrants", "Immigrants", "Non-permanent residents"))%>%filter(`Place of Birth` != "Total - Place of birth of respondent")%>%select(-"Total - Age groups")
# Clear out some unneeded rows and columns
census_yarp <- census_2006%>%filter(!`Immigrant stat`%in%c("Total - Immigrant Status and Period of Immigration", "Non-immigrants", "Immigrants", "Non-permanent residents"))%>%filter(`Place of Birth` != "Total - Place of birth of respondent")%>%select(-"Total - Age groups")
# Clear out some unneeded rows and columns
census_yarp <- census_2006%>%filter(!`Immigrant stat`%in%c("Total - Immigrant Status and Period of Immigration", "Non-immigrants", "Immigrants", "Non-permanent residents"))%>%filter(`Place of birth` != "Total - Place of birth of respondent")%>%select(-"Total - Age groups")
colnames(census_yarp) <- c("COO", "YARP", "0-14", "15-24", "25-54", "55-64", "65+")
View(census_yarp)
census_yarp<-census_yarp[1:7]
# Melt the dataframe
census_melt <- melt(census_yarp, id.vars = c("COO", "YARP"))
census_melt <- resphape2::melt(census_yarp, id.vars = c("COO", "YARP"))
View(census_melt)
colnames(census_melt) <- c("COO", "YARP_GROUPS", "AGE_BANDS", "NUMP")
View(census_melt)
census_melt <- reshape2::melt(census_yarp, id.vars = c("COO", "YARP"))
View(census_melt)
colnames(census_melt) <- c("COO", "YARP_GROUPS", "AGE_BANDS", "NUMP")
View(census_melt)
census_rep_yarp <- census_melt[rep(row.names(census_melt),
ifelse(census_melt$YARP_GROUPS=="Before 1915",1,
ifelse(census_melt$YARP_GROUPS=="2001 to 2006",6,5))),]
View(census_rep_yarp)
census_new_yarp <- census_rep_yarp%>%
group_by(COO, AGE_BANDS)%>%mutate(YARP = seq(from = 1915, to = 2006))
View(census_new_yarp)
# Rep AGE_BANDS then create AGEP column
census_rep_age <- census_new_yarp[rep(row.names(census_new_yarp),
ifelse(census_new_yarp$AGE_BANDS=="0-14",15,  ifelse(census_new_yarp$AGE_BANDS == "15-24", 10, ifelse(census_new_yarp$AGE_BANDS == "25-54", 30, ifelse(census_new_yarp$AGE_BANDS == "55-64", 10,22))))),]
census_rep_age <- census_rep_age%>%arrange(COO)
census_new_age <- census_rep_age%>%
group_by(COO, YARP)%>%
mutate(
AGEP = ifelse(AGE_BANDS == "0-14",
seq(from = 0, to = 14),
ifelse(AGE_BANDS == "15-24",
seq(from = 15, to = 24),
ifelse(AGE_BANDS == "25-54",
seq(from = 25, to = 54),
ifelse(AGE_BANDS == "55-64",
seq(from = 55, to = 64),
seq(from = 65, to = 86))))))
View(census_new_age)
census_yobp <- census_new_age%>%mutate(YOBP = 2006-AGEP)%>%filter(YOBP <= YARP)
View(census_yobp)
write_xlsx(census_yobp, "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_rep_2006.xlsx")
library(tidyverse)
library(reshape2)
library(readxl)
library(writexl)
#library(janitor)
#library(taRifx)
# Renaming countries weith special symbols in Excel
census_rep <- read_xlsx("census_rep_2006.xlsx")
View(census_rep)
colnames(census_rep)
View(unique(census_rep$COO))
census_rep$NUMP<-as.numeric(census_rep$NUMP)
census_rep2<-census_rep%>%group_by(AGE_BANDS,YARP_GROUPS,COO)%>%mutate(NUMP_v2 = NUMP/max(row_number()))
census_colsv2<-census_rep2%>%group_by(AGE_BANDS,YARP_GROUPS,COO)%>%arrange()
census_colsv2$NUMP<-NULL
census_colsv2<-dplyr::rename(census_colsv2,NUMP=NUMP_v2)
census_colsv2%>%ungroup()%>%summarise(sum(NUMP))
View(census_colsv2)
#write_xlsx(census_colsv2, path = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_distributed_v2.xlsx")
saveRDS(census_colsv2,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_distributed.rds")
# Next script census_country1.R
rm(list=ls())
library(janitor)
library(tidyverse)
library(countrycode)
library(readxl)
# Read in Data
census_country <- readRDS("census_distributed.rds")
census_country <- census_country%>%ungroup
View(census_country)
unique(census_country$COO)
# Add iso3 with some warnings and notifications of what doesn't match (i.e. I expected the regions not to match)
census_country <- census_country%>%
mutate(ISO3 = countrycode(
census_country$COO,
origin = "country.name",
destination = "iso3c",
warn = TRUE,
nomatch = NA))
cen_na <- census_country%>%filter(is.na(ISO3))
unique(cen_na$COO)
unique(census_country$ISO3)
unique(census_country$COO)
View(census_country%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
saveRDS(census_country,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2001/census_iso3_2001.rds")
cen_tot<-census_country%>%filter(is.na(ISO3)==F)
sum(cen_tot$NUMP)
library(readxl)
library(writexl)
library(janitor)
library(tidyverse)
# Read in Data
regions <- read_xlsx("jme_regional_classifications.xlsx")
regions <- regions%>%
select("Iso3 code","WHO Region2")
regions
colnames(regions) <- c("iso3", "WHO_regions")
View(regions)
# I'm going to remove any regions in this dataset because they don't have iso3 codes
census_iso3 <- readRDS("census_iso3_2001.rds")
View(census_iso3)
census_iso3 <- census_iso3%>%
filter(!is.na(ISO3))%>%
filter(!COO%in%c("Caribbean and Bermuda", "Czech and Slovak Federal Republic, Former", "China, People's Republic of", "Hong Kong, Special Administrative Region", "Macau, Special Administrative Region"))
#China and Special Administrative Regions
View(census_iso3%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
View(census_iso3)
library(readxl)
library(writexl)
library(janitor)
library(tidyverse)
# Read in Data
regions <- read_xlsx("jme_regional_classifications.xlsx")
regions <- regions%>%
select("Iso3 code","WHO Region2")
regions
colnames(regions) <- c("iso3", "WHO_regions")
View(regions)
census_iso3 <- readRDS("census_iso3_2001.rds")
View(census_iso3)
census_iso3 <- census_iso3%>%
filter(!is.na(ISO3))%>%
filter(!COO%in%c("Caribbean and Bermuda", "Czech and Slovak Federal Republic, Former", "China, People's Republic of", "Hong Kong, Special Administrative Region", "Macau, Special Administrative Region"))
#China and Special Administrative Regions
View(census_iso3%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
View(census_iso3)
# I'm going to remove any regions in this dataset because they don't have iso3 codes
census_iso3 <- readRDS("census_iso3_2001.rds")
# Prior script census_fumbling_2006.R
# Use this script to replicate YARP and distribute the number of people across populations
library(tidyverse)
library(reshape2)
library(readxl)
library(writexl)
#library(janitor)
#library(taRifx)
# Renaming countries weith special symbols in Excel
census_rep <- read_xlsx("census_rep_2006.xlsx")
View(census_rep)
colnames(census_rep)
View(unique(census_rep$COO))
census_rep$NUMP<-as.numeric(census_rep$NUMP)
census_rep2<-census_rep%>%group_by(AGE_BANDS,YARP_GROUPS,COO)%>%mutate(NUMP_v2 = NUMP/max(row_number()))
census_colsv2<-census_rep2%>%group_by(AGE_BANDS,YARP_GROUPS,COO)%>%arrange()
census_colsv2$NUMP<-NULL
census_colsv2<-dplyr::rename(census_colsv2,NUMP=NUMP_v2)
census_colsv2%>%ungroup()%>%summarise(sum(NUMP))
View(census_colsv2)
#write_xlsx(census_colsv2, path = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_distributed_v2.xlsx")
saveRDS(census_colsv2,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_distributed_2006.rds")
# Next script census_country1.R
# Prior script census_dist
# Can I get countrycode to work?
rm(list=ls())
library(janitor)
library(tidyverse)
library(countrycode)
library(readxl)
# Read in Data
census_country <- readRDS("census_distributed_2006.rds")
census_country <- census_country%>%ungroup
View(census_country)
unique(census_country$COO)
# Add iso3 with some warnings and notifications of what doesn't match (i.e. I expected the regions not to match)
census_country <- census_country%>%
mutate(ISO3 = countrycode(
census_country$COO,
origin = "country.name",
destination = "iso3c",
warn = TRUE,
nomatch = NA))
# Checks
unique(census_country%>%filter(ISO3 == "USA"))
unique(census_country$COO)
cen_na <- census_country%>%filter(is.na(ISO3))
unique(cen_na$COO)
View(census_country%>%arrange(YARP)%>%select(COO, ISO3))
View(census_country%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
saveRDS(census_country,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_iso3_2006.rds")
cen_tot<-census_country%>%filter(is.na(ISO3)==F)
sum(cen_tot$NUMP)
aa<-cen_tot%>%group_by(ISO3,YARP,AGEP)%>%summarise(N=n(),tot=sum(NUMP))
bb<-aa%>%group_by(ISO3,N)%>%summarise(g=first(N))
# Next script census_regions.R
library(readxl)
library(writexl)
library(janitor)
library(tidyverse)
# Read in Data
regions <- read_xlsx("jme_regional_classifications.xlsx")
regions <- regions%>%
select("Iso3 code","WHO Region2")
regions
colnames(regions) <- c("iso3", "WHO_regions")
View(regions)
# I'm going to remove any regions in this dataset because they don't have iso3 codes
census_iso3 <- readRDS("census_iso3_2001.rds")
# Prior script census_country1
# Now can I add the WHO regions?
library(readxl)
library(writexl)
library(janitor)
library(tidyverse)
# Read in Data
regions <- read_xlsx("jme_regional_classifications.xlsx")
regions <- regions%>%
select("Iso3 code","WHO Region2")
regions
colnames(regions) <- c("iso3", "WHO_regions")
View(regions)
# I'm going to remove any regions in this dataset because they don't have iso3 codes
census_iso3 <- readRDS("census_iso3_2006.rds")
View(census_iso3)
census_iso3 <- census_iso3%>%
filter(!is.na(ISO3))%>%
filter(!COO%in%c("Caribbean and Bermuda", "Czech and Slovak Federal Republic, Former", "China, People's Republic of", "Hong Kong, Special Administrative Region", "Macau, Special Administrative Region"))
#China and Special Administrative Regions
View(census_iso3%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
View(census_iso3)
unique(regions$WHO_regions)
colnames(regions) <- c("ISO3", "WHO_R")
View(regions)
# Which iso3s don't match up
iso3_vec <- anti_join(census_iso3, regions, by = "ISO3")
iso3_vec_2 <- unique(iso3_vec%>%select(COO, ISO3))
iso3_vec_2 <- iso3_vec_2%>%filter(ISO3%in%c("SHN","SPM","TWN"))%>%mutate(WHO_R = ifelse(ISO3 == "SHN", "EURO", ifelse(ISO3 == "SPM", "AMRO", ifelse(ISO3 == "TWN", "WPRO","Not Classified"))))%>%select(-COO)
View(iso3_vec_2)
# Bind this new dataframe to the WHO regions data
regions <- rbind(regions, iso3_vec_2)
#View(regions)
unique(regions$WHO_R)
str(regions)
str(census_iso3)
#View(regions)
# Join the datasets
census_regions <- merge(census_iso3, regions, by = "ISO3")
#census_regions <- census_regions%>%select(-X1)
View(census_regions)
View(census_regions%>%
summarise(tot_pop = sum(as.numeric(NUMP))))
saveRDS(census_regions,
file = "/Users/ajordan/OneDrive - McGill University/LTBI-Aust-CEA-master/Census/Census 2006/census_who_2006.rds")
